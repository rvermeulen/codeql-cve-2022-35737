/**
 * @name CVE-2022-35737
 * @description ...
 * @kind problem
 */

import cpp
import semmle.code.cpp.dataflow.DataFlow
import semmle.code.cpp.rangeanalysis.SimpleRangeAnalysis

class StaticBufferAssign extends AssignExpr {
  StaticBufferAssign() { this.getRValue().getType() instanceof ArrayType }
}

class DynamicBufferAssign extends AssignExpr {
  DynamicBufferAssign() {
    exists(FunctionCall call |
      call.getTarget().getName() in ["malloc", "printfTempBuf"] and
      this.getRValue() = call
    )
  }
}

Expr getAssigned(AssignExpr assign) {
  result = assign.getLValue()
  or
  exists(AssignExpr outerAssign |
    outerAssign.getRValue() = assign and
    result = getAssigned(outerAssign)
  )
}

from
  AssignAddExpr assignAdd, IfStmt check, GTExpr comparison, StaticBufferAssign sba,
  DynamicBufferAssign dba, Variable ptr
where
  check.getCondition() = comparison and
  DataFlow::localExprFlow(assignAdd, comparison.getAnOperand()) and
  check.getThen() = dba.getEnclosingStmt().getParent() and
  check.getElse() = sba.getEnclosingStmt().getParent() and
  ptr.getAnAccess() = getAssigned(sba) and
  ptr.getAnAccess() = getAssigned(dba) and
  exprMightOverflowPositively(assignAdd)
select sba, "Possible incorrect assignment $@ based on the $@ that can overflow",
  sba.getRValue().(VariableAccess).getTarget(), "static buffer", assignAdd, "expression"
